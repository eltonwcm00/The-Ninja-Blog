// Node server

const http = require('http');
const fs = require('fs');

/* Response & request object */
const server = http.createServer((req, res) => {
    
    // Request
    console.log(req.url, req.method);

    // Response
    res.setHeader('Content-Type', 'text/html');
    
    // Routing
    let path = './views/';

    switch(req.url) {
        case '/':
            path += 'index.html';
            res.statusCode = 200;
            break;

        case '/about':
            path += 'About.html';
            res.statusCode = 200;
            break;

        case '/about-me':
            res.statusCode = 301;
            res.setHeader('Location', '/about');
            res.end();
            break;

        default:
            path += '404.html';
            res.statusCode = 404;
            break;
    }

    // send an HTML file
    fs.readFile(path, (err, data) => {
        if(err) {
            console.log(err);
            res.end();
        } else {
            res.write(data);
            //res.end(data);
            res.end();
        }
    })

});

server.listen(3000, 'localhost', () => {
    console.log('Listening for request on port 3000');
})





/* Lodash library*/
const _ = require('lodash');

const num = _.random(0, 20);
console.log(num);
const greet = _.once(() => {
    console.log('hello');
});

greet();
greet();





/* Redirect */
app.get('/about-us', (req, res) => {
    res.redirect('/about');
});




/* Middleware */
app.use((req, res, next) => {
    console.log('New request was made :');
    console.log('Host', req.hostname);
    console.log('Path', req.path);
    console.log('Method', req.method);
    next();
});

app.use((req, res, next) => {
    console.log('In the next piece of middlware');
    next();
});





/* Mongoose and MongoDB sandbox routes */
// INSERT
app.get('/add-blog', (req, res) => {
    const blog = new Blog({
        title: 'New blog',
        snippet: 'About my new blog',
        body: 'More about my new blog'
    });

    blog.save().then((result) => {
        res.send(result);
    }).catch((err) => {
        console.log(err);
    });
})

// READ
app.get('/all-blogs', (req, res) => {
    Blog.find().then((result) => {
        res.send(result);
    }).catch((err) => {
        console.log(err);
    });
})

// READ (Filter)
app.get('/single-blog', (req, res) => {
    Blog.findById('60b2369e5d61f9113c23aff9').then((result) => {
        res.send(result);
    }).catch((err) => {
        console.log(err);
    });
})




/*Remove dummy data */
app.get('/blogs', (req, res) => {
    const blogs = [
        {title: 'Yoshi finds eggs', snippet: 'Lorem ipsum dolor sit amet consectetur'},
        {title: 'Mario finds stars', snippet: 'Lorem ipsum dolor sit amet consectetur'},
        {title: 'How to defeat bowser', snippet: 'Lorem ipsum dolor sit amet consectetur'},
    ];

    // res.sendFile('./views/index.html', { root: __dirname });
    res.render('index', { title: 'Home', blogs: blogs });
});



/* blogRoutes.js */
// READ : Display all blog routes by cycle through the index.ejs
router.get('/blogs', (req, res) => {
    Blog.find().sort({createdAt: -1 })
        .then((result) => {
            res.render('index', { title: 'All Blogs', blogs: result });
        })
        .catch((err) => {
            console.log(err);
        })
})

//CREATE : POST request to the server by cycle through the create.ejs
router.post('/blogs', (req, res) => {
    // console.log(req.body);
    const blog = new Blog(req.body);
    
    blog.save()
        .then((result) => {
            // Redirect user upon success
            res.redirect('/blogs');
        })
        .catch((err) => {
            console.log(err);
        })
})

//READ : Read the corresponding id blog post when it is clicked (Route Parameter)
router.get('/blogs/:id', (req, res) => {
    // Catch the ./id from the URL
    const id = req.params.id;

    Blog.findById(id)
        .then((result) => {
            // Render the blog details page
            res.render('details', {blog: result, title: 'Blog Details'});
        })
        .catch((err) => {
            console.log(err);
        })
})

//DELETE : Delete the corresponding id blog post
router.delete('/blogs/:id', (req, res) => {
    const id = req.params.id;
    
    Blog.findByIdAndDelete(id)
        .then((result) => {
            // Made an AJAX request for deleting, can't use redirect('/blogs).
            // The request must be made in the front-end not from the server.
            // Send JSON as the response
            res.json( {redirect: '/blogs'} );
        })
        .catch((err) => {
            console.log(err);
        })
})

module.exports = router;

